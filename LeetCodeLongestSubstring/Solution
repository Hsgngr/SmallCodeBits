class Solution {
    public Solution() {
    }

    public static int lengthOfLongestSubstring(String s) {
        int counter;
        int maxCount = 0;
        for (int i = 0; i < s.length(); i++) {
            counter = 1;
            Set<Character> tempSet = new HashSet<>();
            tempSet.add(s.charAt(i));
            for (int j = i + 1; j < s.length(); j++) {
                if (tempSet.add(s.charAt(j))) {
                    counter++;
                } else {
                    if (maxCount < counter) maxCount = counter;
                    counter = 0;
                    break;
                }
                if (maxCount < counter) maxCount = counter;
            }
            if (maxCount < counter) maxCount = counter;
        }
        return maxCount;
    }
} //Benim sonucum
//================================================================================
//Approach 1 Brute Force:
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j <= n; j++)
                if (allUnique(s, i, j)) ans = Math.max(ans, j - i);
        return ans;
    }

    public boolean allUnique(String s, int start, int end) {
        Set<Character> set = new HashSet<>();
        for (int i = start; i < end; i++) {
            Character ch = s.charAt(i);
            if (set.contains(ch)) return false;
            set.add(ch);
        }
        return true;
    }
}
//===================================================================================
//Approach 2 Sliding Window:
/*
        A sliding window is an abstract concept commonly used in array/string problems.
        A window is a range of elements in the array/string which usually defined by the start and end indices, i.e. [i, j)[i,j)
         (left-closed, right-open). A sliding window is a window "slides" its two boundaries to the certain direction.
        For example, if we slide [i, j)[i,j) to the right by 11 element, then it becomes [i+1, j+1)[i+1,j+1) (left-closed, right-open).

        Back to our problem. We use HashSet to store the characters in current window [i, j)[i,j) (j = ij=i initially).
        Then we slide the index jj to the right. If it is not in the HashSet, we slide jj further.
         Doing so until s[j] is already in the HashSet. 
         At this point, we found the maximum size of substrings without duplicate characters start with index ii. 
         If we do this for all ii, we get our answer.
*/


public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
//Approach 3 Sliding Window Optimized
/*
        The above solution requires at most 2n steps. In fact, it could be optimized to require only n steps.
         Instead of using a set to tell if a character exists or not, we could define a mapping of the characters to its index.
         Then we can skip the characters immediately when we found a repeated character.

        The reason is that if s[j] have a duplicate in the range [i,j) with index j′,
        we don't need to increase i little by little. We can skip all the elements in the range [i, j']
        and let i to be j′+1 directly.
        */     
        public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
