//Iterative version:
import java.util.*;

public class Solution {
    public Solution() {
    }

    public static boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(root);
        while (!q.isEmpty()) {
            TreeNode t1 = q.poll();
            TreeNode t2 = q.poll();
            if (t1 == null && t2 == null) continue;
            if (t1 == null || t2 == null) return false;
            if (t1.val != t2.val) return false;
            q.add(t1.left);
            q.add(t2.right);
            q.add(t1.right);
            q.add(t2.left);
        }
        return true;
    }
}
//Recursive

public boolean isSymmetric(TreeNode root) {
    return isMirror(root, root);
}

public boolean isMirror(TreeNode t1, TreeNode t2) {
    if (t1 == null && t2 == null) return true;
    if (t1 == null || t2 == null) return false;
    return (t1.val == t2.val)
        && isMirror(t1.right, t2.left)
        && isMirror(t1.left, t2.right);
}



//============================================================================
//Aşırı elegant bir çözüm beynim yandı helal olsun.
//https://leetcode.com/problems/symmetric-tree/solution/
/*public class Main {

    public static void main(String[] args) {
        // write your code here
*//*        TreeNode a = new TreeNode(1);
        TreeNode b = new TreeNode(2);
        TreeNode c = new TreeNode(2);
        TreeNode d = new TreeNode(3);
        TreeNode e = new TreeNode(4);
        TreeNode f = new TreeNode(4);
        TreeNode g = new TreeNode(3);
        TreeNode h = new TreeNode(8);
        TreeNode i = new TreeNode(9);

        a.left=b;
        a.right=c;
        b.left=d;
        b.right=e;
        c.left=f;
        c.right=g;*//*
        TreeNode x = new TreeNode(1);
        TreeNode y = new TreeNode(2);
        TreeNode z = new TreeNode(2);
        TreeNode t = new TreeNode(3);
        TreeNode q = new TreeNode(3);

        x.left=y;
        x.right=z;
        y.right=t;
        z.right=q;


        System.out.println(Solution.isSymmetric(x));
    }
}======================================================================================*/
/*
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }

    @Override
    public String toString() {
        return "" +this.val;
    }
}*/
