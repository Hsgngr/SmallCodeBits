import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Stack;

public class Solution {
    public Solution() {
    }
    public static List<Character> inorderTraversal(TreeNode root) {
        if (root == null) return Collections.emptyList();
        Stack<TreeNode> stack = new Stack<>();
        List<Character> order = new ArrayList<>();

        TreeNode currentNode = root;
        while (!stack.isEmpty() || currentNode != null) {

            while (currentNode != null) { //Reach the left most Node of the currentNode
                stack.push(currentNode);
                currentNode = currentNode.left;

            } //current must be null at this point;

            currentNode = stack.pop();
            order.add(currentNode.val);
            currentNode =currentNode.right; //We have visited the nodes and its left subtree. Now  it's right subtree's turn.
        }
        return order;
    }
}

/*
public class TreeNode {
   // int val;
    Character val;
    TreeNode left;
    TreeNode right;
    TreeNode(Character x) {
        val = x;
    }
    @Override
    public String toString() {
        return this.val.toString();
    }
}*/

/*

public class Main {

    public static void main(String[] args) {
	// write your code here
        TreeNode a = new TreeNode('A');
        TreeNode b = new TreeNode('B');
        TreeNode c = new TreeNode('C');
        TreeNode d = new TreeNode('D');
        TreeNode e = new TreeNode('E');
        TreeNode f = new TreeNode('F');
        TreeNode g = new TreeNode('G');
        TreeNode h = new TreeNode('H');
        TreeNode i = new TreeNode('I');

        f.left=b;
        f.right=g;
        b.left =a;
        b.right=d;
        d.left=c;
        d.right=e;
        g.right=i;
        i.left=h;

        System.out.println(Solution.inorderTraversal(f));

    }
}
*/


