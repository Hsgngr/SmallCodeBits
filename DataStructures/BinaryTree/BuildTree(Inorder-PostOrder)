public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildTree(inorder, inorder.length - 1, 0, postorder, postorder.length - 1);
    }

    private TreeNode buildTree(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart) {
        if (postStart < 0 || inStart < inEnd) return null;

        TreeNode root = new TreeNode(postorder[postStart]);
        int rIndex = inStart; //find the index of the root from inorder. Iterating from the end.

        for (int i = inStart; i >= inEnd; i--) {
            if (inorder[i] == postorder[postStart]) {
                rIndex = i;
                break;
            }
        }
        //build right and left subtrees. Again, scanning from the end to find the sections.
            root.right = buildTree(inorder, inStart, rIndex + 1, postorder, postStart - 1);
            root.left = buildTree(inorder, rIndex - 1, inEnd, postorder, postStart - (inStart - rIndex) - 1);

            return root;
        }
    }
    //Önemli olan burda
    //postorderın sonunun root olduğunu bilmek
    //Inorderda rootun yerini sondan gelerek bulmak.
    //ve bulduktan sonra inStart, inEnd ve postStart ile yeni gelen recursive functionun çalışıcağı yeri belirlemek.
    
   //Question: 
   https://leetcode.com/explore/learn/card/data-structure-tree/133/conclusion/942/
   
   //Solution:
   //https://www.geeksforgeeks.org/construct-tree-from-given-inorder-and-preorder-traversal/
   //https://www.geeksforgeeks.org/construct-a-binary-tree-from-postorder-and-inorder/
   //https://leetcode.com/explore/learn/card/data-structure-tree/133/conclusion/942/discuss/34787/Simple-and-clean-Java-solution-with-comments-recursive.
