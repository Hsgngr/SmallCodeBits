//Given preorder and inorder traversal of a tree, construct the binary tree.
public class Solution2 {
    public static TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTree(preorder, inorder, 0, inorder.length - 1, 0);
    }

    public static TreeNode buildTree(int[] preorder, int[] inorder, int inStart, int inEnd, int recursiveIndex) {
        if (inEnd > preorder.length - 1 || inStart > inEnd) {
            return null;
        }

        TreeNode root = new TreeNode(preorder[recursiveIndex]);
        int inIndex = 0;
        if (inStart == inEnd) return root;

        for (int i = inStart; inStart < inEnd; i++) {
            if (inorder[i] == root.val) {
                inIndex = i;
                break;
            }
        }
        root.left = buildTree(preorder, inorder, inStart, inIndex - 1, recursiveIndex + 1);
        root.right = buildTree(preorder, inorder, inIndex + 1, inEnd, recursiveIndex + inIndex - inStart + 1);
        return root;
    }
}

//Question: https://leetcode.com/explore/learn/card/data-structure-tree/133/conclusion/943/
